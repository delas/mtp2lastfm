// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MTP2LASTFM_H
#define MTP2LASTFM_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xml
{
  class mtp2lastfm;
  class track;
  class lastfm;
  class scrobbled;
  class toScrobble;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace xml
{
  class mtp2lastfm: public ::xml_schema::type
  {
    public:
    // lastfm
    // 
    typedef ::xml::lastfm lastfm_type;
    typedef ::xsd::cxx::tree::traits< lastfm_type, char > lastfm_traits;

    const lastfm_type&
    lastfm () const;

    lastfm_type&
    lastfm ();

    void
    lastfm (const lastfm_type& x);

    void
    lastfm (::std::auto_ptr< lastfm_type > p);

    // scrobbled
    // 
    typedef ::xml::scrobbled scrobbled_type;
    typedef ::xsd::cxx::tree::traits< scrobbled_type, char > scrobbled_traits;

    const scrobbled_type&
    scrobbled () const;

    scrobbled_type&
    scrobbled ();

    void
    scrobbled (const scrobbled_type& x);

    void
    scrobbled (::std::auto_ptr< scrobbled_type > p);

    // toScrobble
    // 
    typedef ::xml::toScrobble toScrobble_type;
    typedef ::xsd::cxx::tree::traits< toScrobble_type, char > toScrobble_traits;

    const toScrobble_type&
    toScrobble () const;

    toScrobble_type&
    toScrobble ();

    void
    toScrobble (const toScrobble_type& x);

    void
    toScrobble (::std::auto_ptr< toScrobble_type > p);

    // Constructors.
    //
    mtp2lastfm (const lastfm_type&,
                const scrobbled_type&,
                const toScrobble_type&);

    mtp2lastfm (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    mtp2lastfm (const mtp2lastfm& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual mtp2lastfm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~mtp2lastfm ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< lastfm_type > lastfm_;
    ::xsd::cxx::tree::one< scrobbled_type > scrobbled_;
    ::xsd::cxx::tree::one< toScrobble_type > toScrobble_;
  };

  class track: public ::xml_schema::type
  {
    public:
    // title
    // 
    typedef ::xml_schema::string title_type;
    typedef ::xsd::cxx::tree::traits< title_type, char > title_traits;

    const title_type&
    title () const;

    title_type&
    title ();

    void
    title (const title_type& x);

    void
    title (::std::auto_ptr< title_type > p);

    // artist
    // 
    typedef ::xml_schema::string artist_type;
    typedef ::xsd::cxx::tree::traits< artist_type, char > artist_traits;

    const artist_type&
    artist () const;

    artist_type&
    artist ();

    void
    artist (const artist_type& x);

    void
    artist (::std::auto_ptr< artist_type > p);

    // album
    // 
    typedef ::xml_schema::string album_type;
    typedef ::xsd::cxx::tree::traits< album_type, char > album_traits;

    const album_type&
    album () const;

    album_type&
    album ();

    void
    album (const album_type& x);

    void
    album (::std::auto_ptr< album_type > p);

    // albumPosition
    // 
    typedef ::xml_schema::positive_integer albumPosition_type;
    typedef ::xsd::cxx::tree::traits< albumPosition_type, char > albumPosition_traits;

    const albumPosition_type&
    albumPosition () const;

    albumPosition_type&
    albumPosition ();

    void
    albumPosition (const albumPosition_type& x);

    // length
    // 
    typedef ::xml_schema::positive_integer length_type;
    typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

    const length_type&
    length () const;

    length_type&
    length ();

    void
    length (const length_type& x);

    // playCount
    // 
    typedef ::xml_schema::positive_integer playCount_type;
    typedef ::xsd::cxx::tree::traits< playCount_type, char > playCount_traits;

    const playCount_type&
    playCount () const;

    playCount_type&
    playCount ();

    void
    playCount (const playCount_type& x);

    // Constructors.
    //
    track (const title_type&,
           const artist_type&,
           const album_type&,
           const albumPosition_type&,
           const length_type&,
           const playCount_type&);

    track (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    track (const track& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual track*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~track ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< title_type > title_;
    ::xsd::cxx::tree::one< artist_type > artist_;
    ::xsd::cxx::tree::one< album_type > album_;
    ::xsd::cxx::tree::one< albumPosition_type > albumPosition_;
    ::xsd::cxx::tree::one< length_type > length_;
    ::xsd::cxx::tree::one< playCount_type > playCount_;
  };

  class lastfm: public ::xml_schema::type
  {
    public:
    // username
    // 
    typedef ::xml_schema::string username_type;
    typedef ::xsd::cxx::tree::traits< username_type, char > username_traits;

    const username_type&
    username () const;

    username_type&
    username ();

    void
    username (const username_type& x);

    void
    username (::std::auto_ptr< username_type > p);

    // passwordMd5Hash
    // 
    typedef ::xml_schema::string passwordMd5Hash_type;
    typedef ::xsd::cxx::tree::traits< passwordMd5Hash_type, char > passwordMd5Hash_traits;

    const passwordMd5Hash_type&
    passwordMd5Hash () const;

    passwordMd5Hash_type&
    passwordMd5Hash ();

    void
    passwordMd5Hash (const passwordMd5Hash_type& x);

    void
    passwordMd5Hash (::std::auto_ptr< passwordMd5Hash_type > p);

    // Constructors.
    //
    lastfm (const username_type&,
            const passwordMd5Hash_type&);

    lastfm (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    lastfm (const lastfm& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual lastfm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~lastfm ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< username_type > username_;
    ::xsd::cxx::tree::one< passwordMd5Hash_type > passwordMd5Hash_;
  };

  class scrobbled: public ::xml_schema::type
  {
    public:
    // track
    // 
    typedef ::xml::track track_type;
    typedef ::xsd::cxx::tree::sequence< track_type > track_sequence;
    typedef track_sequence::iterator track_iterator;
    typedef track_sequence::const_iterator track_const_iterator;
    typedef ::xsd::cxx::tree::traits< track_type, char > track_traits;

    const track_sequence&
    track () const;

    track_sequence&
    track ();

    void
    track (const track_sequence& s);

    // Constructors.
    //
    scrobbled ();

    scrobbled (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    scrobbled (const scrobbled& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual scrobbled*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~scrobbled ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    track_sequence track_;
  };

  class toScrobble: public ::xml_schema::type
  {
    public:
    // track
    // 
    typedef ::xml::track track_type;
    typedef ::xsd::cxx::tree::sequence< track_type > track_sequence;
    typedef track_sequence::iterator track_iterator;
    typedef track_sequence::const_iterator track_const_iterator;
    typedef ::xsd::cxx::tree::traits< track_type, char > track_traits;

    const track_sequence&
    track () const;

    track_sequence&
    track ();

    void
    track (const track_sequence& s);

    // Constructors.
    //
    toScrobble ();

    toScrobble (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    toScrobble (const toScrobble& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual toScrobble*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~toScrobble ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    track_sequence track_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xml
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xml
{
  // Serialize to std::ostream.
  //

  void
  mtp2lastfm_ (::std::ostream& os,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mtp2lastfm_ (::std::ostream& os,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mtp2lastfm_ (::std::ostream& os,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& ft,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& ft,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& ft,
               const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  mtp2lastfm_ (::xercesc::DOMDocument& d,
               const ::xml::mtp2lastfm& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  mtp2lastfm_ (const ::xml::mtp2lastfm& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const mtp2lastfm&);

  void
  operator<< (::xercesc::DOMElement&, const track&);

  void
  operator<< (::xercesc::DOMElement&, const lastfm&);

  void
  operator<< (::xercesc::DOMElement&, const scrobbled&);

  void
  operator<< (::xercesc::DOMElement&, const toScrobble&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MTP2LASTFM_H
