// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mtp2lastfm.h"

namespace xml
{
  // mtp2lastfm
  // 

  const mtp2lastfm::lastfm_type& mtp2lastfm::
  lastfm () const
  {
    return this->lastfm_.get ();
  }

  mtp2lastfm::lastfm_type& mtp2lastfm::
  lastfm ()
  {
    return this->lastfm_.get ();
  }

  void mtp2lastfm::
  lastfm (const lastfm_type& x)
  {
    this->lastfm_.set (x);
  }

  void mtp2lastfm::
  lastfm (::std::auto_ptr< lastfm_type > x)
  {
    this->lastfm_.set (x);
  }

  const mtp2lastfm::scrobbled_type& mtp2lastfm::
  scrobbled () const
  {
    return this->scrobbled_.get ();
  }

  mtp2lastfm::scrobbled_type& mtp2lastfm::
  scrobbled ()
  {
    return this->scrobbled_.get ();
  }

  void mtp2lastfm::
  scrobbled (const scrobbled_type& x)
  {
    this->scrobbled_.set (x);
  }

  void mtp2lastfm::
  scrobbled (::std::auto_ptr< scrobbled_type > x)
  {
    this->scrobbled_.set (x);
  }

  const mtp2lastfm::toScrobble_type& mtp2lastfm::
  toScrobble () const
  {
    return this->toScrobble_.get ();
  }

  mtp2lastfm::toScrobble_type& mtp2lastfm::
  toScrobble ()
  {
    return this->toScrobble_.get ();
  }

  void mtp2lastfm::
  toScrobble (const toScrobble_type& x)
  {
    this->toScrobble_.set (x);
  }

  void mtp2lastfm::
  toScrobble (::std::auto_ptr< toScrobble_type > x)
  {
    this->toScrobble_.set (x);
  }


  // track
  // 

  const track::title_type& track::
  title () const
  {
    return this->title_.get ();
  }

  track::title_type& track::
  title ()
  {
    return this->title_.get ();
  }

  void track::
  title (const title_type& x)
  {
    this->title_.set (x);
  }

  void track::
  title (::std::auto_ptr< title_type > x)
  {
    this->title_.set (x);
  }

  const track::artist_type& track::
  artist () const
  {
    return this->artist_.get ();
  }

  track::artist_type& track::
  artist ()
  {
    return this->artist_.get ();
  }

  void track::
  artist (const artist_type& x)
  {
    this->artist_.set (x);
  }

  void track::
  artist (::std::auto_ptr< artist_type > x)
  {
    this->artist_.set (x);
  }

  const track::album_type& track::
  album () const
  {
    return this->album_.get ();
  }

  track::album_type& track::
  album ()
  {
    return this->album_.get ();
  }

  void track::
  album (const album_type& x)
  {
    this->album_.set (x);
  }

  void track::
  album (::std::auto_ptr< album_type > x)
  {
    this->album_.set (x);
  }

  const track::albumPosition_type& track::
  albumPosition () const
  {
    return this->albumPosition_.get ();
  }

  track::albumPosition_type& track::
  albumPosition ()
  {
    return this->albumPosition_.get ();
  }

  void track::
  albumPosition (const albumPosition_type& x)
  {
    this->albumPosition_.set (x);
  }

  const track::length_type& track::
  length () const
  {
    return this->length_.get ();
  }

  track::length_type& track::
  length ()
  {
    return this->length_.get ();
  }

  void track::
  length (const length_type& x)
  {
    this->length_.set (x);
  }

  const track::playCount_type& track::
  playCount () const
  {
    return this->playCount_.get ();
  }

  track::playCount_type& track::
  playCount ()
  {
    return this->playCount_.get ();
  }

  void track::
  playCount (const playCount_type& x)
  {
    this->playCount_.set (x);
  }


  // lastfm
  // 

  const lastfm::username_type& lastfm::
  username () const
  {
    return this->username_.get ();
  }

  lastfm::username_type& lastfm::
  username ()
  {
    return this->username_.get ();
  }

  void lastfm::
  username (const username_type& x)
  {
    this->username_.set (x);
  }

  void lastfm::
  username (::std::auto_ptr< username_type > x)
  {
    this->username_.set (x);
  }

  const lastfm::passwordMd5Hash_type& lastfm::
  passwordMd5Hash () const
  {
    return this->passwordMd5Hash_.get ();
  }

  lastfm::passwordMd5Hash_type& lastfm::
  passwordMd5Hash ()
  {
    return this->passwordMd5Hash_.get ();
  }

  void lastfm::
  passwordMd5Hash (const passwordMd5Hash_type& x)
  {
    this->passwordMd5Hash_.set (x);
  }

  void lastfm::
  passwordMd5Hash (::std::auto_ptr< passwordMd5Hash_type > x)
  {
    this->passwordMd5Hash_.set (x);
  }


  // scrobbled
  // 

  const scrobbled::track_sequence& scrobbled::
  track () const
  {
    return this->track_;
  }

  scrobbled::track_sequence& scrobbled::
  track ()
  {
    return this->track_;
  }

  void scrobbled::
  track (const track_sequence& s)
  {
    this->track_ = s;
  }


  // toScrobble
  // 

  const toScrobble::track_sequence& toScrobble::
  track () const
  {
    return this->track_;
  }

  toScrobble::track_sequence& toScrobble::
  track ()
  {
    return this->track_;
  }

  void toScrobble::
  track (const track_sequence& s)
  {
    this->track_ = s;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xml
{
  // mtp2lastfm
  //

  mtp2lastfm::
  mtp2lastfm (const lastfm_type& lastfm,
              const scrobbled_type& scrobbled,
              const toScrobble_type& toScrobble)
  : ::xml_schema::type (),
    lastfm_ (lastfm, ::xml_schema::flags (), this),
    scrobbled_ (scrobbled, ::xml_schema::flags (), this),
    toScrobble_ (toScrobble, ::xml_schema::flags (), this)
  {
  }

  mtp2lastfm::
  mtp2lastfm (const mtp2lastfm& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    lastfm_ (x.lastfm_, f, this),
    scrobbled_ (x.scrobbled_, f, this),
    toScrobble_ (x.toScrobble_, f, this)
  {
  }

  mtp2lastfm::
  mtp2lastfm (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    lastfm_ (f, this),
    scrobbled_ (f, this),
    toScrobble_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void mtp2lastfm::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // lastfm
      //
      if (n.name () == "lastfm" && n.namespace_ () == "")
      {
        ::std::auto_ptr< lastfm_type > r (
          lastfm_traits::create (i, f, this));

        if (!lastfm_.present ())
        {
          this->lastfm (r);
          continue;
        }
      }

      // scrobbled
      //
      if (n.name () == "scrobbled" && n.namespace_ () == "")
      {
        ::std::auto_ptr< scrobbled_type > r (
          scrobbled_traits::create (i, f, this));

        if (!scrobbled_.present ())
        {
          this->scrobbled (r);
          continue;
        }
      }

      // toScrobble
      //
      if (n.name () == "toScrobble" && n.namespace_ () == "")
      {
        ::std::auto_ptr< toScrobble_type > r (
          toScrobble_traits::create (i, f, this));

        if (!toScrobble_.present ())
        {
          this->toScrobble (r);
          continue;
        }
      }

      break;
    }

    if (!lastfm_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "lastfm",
        "");
    }

    if (!scrobbled_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "scrobbled",
        "");
    }

    if (!toScrobble_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "toScrobble",
        "");
    }
  }

  mtp2lastfm* mtp2lastfm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new mtp2lastfm (*this, f, c);
  }

  mtp2lastfm::
  ~mtp2lastfm ()
  {
  }

  // track
  //

  track::
  track (const title_type& title,
         const artist_type& artist,
         const album_type& album,
         const albumPosition_type& albumPosition,
         const length_type& length,
         const playCount_type& playCount)
  : ::xml_schema::type (),
    title_ (title, ::xml_schema::flags (), this),
    artist_ (artist, ::xml_schema::flags (), this),
    album_ (album, ::xml_schema::flags (), this),
    albumPosition_ (albumPosition, ::xml_schema::flags (), this),
    length_ (length, ::xml_schema::flags (), this),
    playCount_ (playCount, ::xml_schema::flags (), this)
  {
  }

  track::
  track (const track& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    title_ (x.title_, f, this),
    artist_ (x.artist_, f, this),
    album_ (x.album_, f, this),
    albumPosition_ (x.albumPosition_, f, this),
    length_ (x.length_, f, this),
    playCount_ (x.playCount_, f, this)
  {
  }

  track::
  track (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    title_ (f, this),
    artist_ (f, this),
    album_ (f, this),
    albumPosition_ (f, this),
    length_ (f, this),
    playCount_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void track::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // title
      //
      if (n.name () == "title" && n.namespace_ () == "")
      {
        ::std::auto_ptr< title_type > r (
          title_traits::create (i, f, this));

        if (!title_.present ())
        {
          this->title (r);
          continue;
        }
      }

      // artist
      //
      if (n.name () == "artist" && n.namespace_ () == "")
      {
        ::std::auto_ptr< artist_type > r (
          artist_traits::create (i, f, this));

        if (!artist_.present ())
        {
          this->artist (r);
          continue;
        }
      }

      // album
      //
      if (n.name () == "album" && n.namespace_ () == "")
      {
        ::std::auto_ptr< album_type > r (
          album_traits::create (i, f, this));

        if (!album_.present ())
        {
          this->album (r);
          continue;
        }
      }

      // albumPosition
      //
      if (n.name () == "albumPosition" && n.namespace_ () == "")
      {
        if (!albumPosition_.present ())
        {
          this->albumPosition (albumPosition_traits::create (i, f, this));
          continue;
        }
      }

      // length
      //
      if (n.name () == "length" && n.namespace_ () == "")
      {
        if (!length_.present ())
        {
          this->length (length_traits::create (i, f, this));
          continue;
        }
      }

      // playCount
      //
      if (n.name () == "playCount" && n.namespace_ () == "")
      {
        if (!playCount_.present ())
        {
          this->playCount (playCount_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!title_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "title",
        "");
    }

    if (!artist_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "artist",
        "");
    }

    if (!album_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "album",
        "");
    }

    if (!albumPosition_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "albumPosition",
        "");
    }

    if (!length_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "length",
        "");
    }

    if (!playCount_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "playCount",
        "");
    }
  }

  track* track::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new track (*this, f, c);
  }

  track::
  ~track ()
  {
  }

  // lastfm
  //

  lastfm::
  lastfm (const username_type& username,
          const passwordMd5Hash_type& passwordMd5Hash)
  : ::xml_schema::type (),
    username_ (username, ::xml_schema::flags (), this),
    passwordMd5Hash_ (passwordMd5Hash, ::xml_schema::flags (), this)
  {
  }

  lastfm::
  lastfm (const lastfm& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    username_ (x.username_, f, this),
    passwordMd5Hash_ (x.passwordMd5Hash_, f, this)
  {
  }

  lastfm::
  lastfm (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    username_ (f, this),
    passwordMd5Hash_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void lastfm::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // username
      //
      if (n.name () == "username" && n.namespace_ () == "")
      {
        ::std::auto_ptr< username_type > r (
          username_traits::create (i, f, this));

        if (!username_.present ())
        {
          this->username (r);
          continue;
        }
      }

      // passwordMd5Hash
      //
      if (n.name () == "passwordMd5Hash" && n.namespace_ () == "")
      {
        ::std::auto_ptr< passwordMd5Hash_type > r (
          passwordMd5Hash_traits::create (i, f, this));

        if (!passwordMd5Hash_.present ())
        {
          this->passwordMd5Hash (r);
          continue;
        }
      }

      break;
    }

    if (!username_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "username",
        "");
    }

    if (!passwordMd5Hash_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "passwordMd5Hash",
        "");
    }
  }

  lastfm* lastfm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new lastfm (*this, f, c);
  }

  lastfm::
  ~lastfm ()
  {
  }

  // scrobbled
  //

  scrobbled::
  scrobbled ()
  : ::xml_schema::type (),
    track_ (::xml_schema::flags (), this)
  {
  }

  scrobbled::
  scrobbled (const scrobbled& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    track_ (x.track_, f, this)
  {
  }

  scrobbled::
  scrobbled (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    track_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void scrobbled::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // track
      //
      if (n.name () == "track" && n.namespace_ () == "")
      {
        ::std::auto_ptr< track_type > r (
          track_traits::create (i, f, this));

        this->track ().push_back (r);
        continue;
      }

      break;
    }
  }

  scrobbled* scrobbled::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new scrobbled (*this, f, c);
  }

  scrobbled::
  ~scrobbled ()
  {
  }

  // toScrobble
  //

  toScrobble::
  toScrobble ()
  : ::xml_schema::type (),
    track_ (::xml_schema::flags (), this)
  {
  }

  toScrobble::
  toScrobble (const toScrobble& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    track_ (x.track_, f, this)
  {
  }

  toScrobble::
  toScrobble (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    track_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void toScrobble::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // track
      //
      if (n.name () == "track" && n.namespace_ () == "")
      {
        ::std::auto_ptr< track_type > r (
          track_traits::create (i, f, this));

        this->track ().push_back (r);
        continue;
      }

      break;
    }
  }

  toScrobble* toScrobble::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new toScrobble (*this, f, c);
  }

  toScrobble::
  ~toScrobble ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xml
{
  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xml::mtp2lastfm_ (isrc, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xml::mtp2lastfm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xml::mtp2lastfm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xml::mtp2lastfm_ (isrc, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xml::mtp2lastfm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xml::mtp2lastfm_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml::mtp2lastfm > r (
      ::xml::mtp2lastfm_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml::mtp2lastfm > r (
        ::xml::mtp2lastfm_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mtp2lastfm" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::xml::mtp2lastfm > r (
        ::xsd::cxx::tree::traits< ::xml::mtp2lastfm, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mtp2lastfm",
      "");
  }

  ::std::auto_ptr< ::xml::mtp2lastfm >
  mtp2lastfm_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "mtp2lastfm" &&
        n.namespace_ () == "")
    {
      ::std::auto_ptr< ::xml::mtp2lastfm > r (
        ::xsd::cxx::tree::traits< ::xml::mtp2lastfm, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mtp2lastfm",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xml
{
  void
  mtp2lastfm_ (::std::ostream& o,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mtp2lastfm_ (::std::ostream& o,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mtp2lastfm_ (::std::ostream& o,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& t,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& t,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mtp2lastfm_ (::xercesc::XMLFormatTarget& t,
               const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xml::mtp2lastfm_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mtp2lastfm_ (::xercesc::DOMDocument& d,
               const ::xml::mtp2lastfm& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mtp2lastfm" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "mtp2lastfm",
        "");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  mtp2lastfm_ (const ::xml::mtp2lastfm& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "mtp2lastfm",
          "",
          m, f));

      ::xml::mtp2lastfm_ (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mtp2lastfm& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // lastfm
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "lastfm",
          e));

      s << i.lastfm ();
    }

    // scrobbled
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "scrobbled",
          e));

      s << i.scrobbled ();
    }

    // toScrobble
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "toScrobble",
          e));

      s << i.toScrobble ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const track& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // title
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "title",
          e));

      s << i.title ();
    }

    // artist
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "artist",
          e));

      s << i.artist ();
    }

    // album
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "album",
          e));

      s << i.album ();
    }

    // albumPosition
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "albumPosition",
          e));

      s << i.albumPosition ();
    }

    // length
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "length",
          e));

      s << i.length ();
    }

    // playCount
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "playCount",
          e));

      s << i.playCount ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const lastfm& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // username
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "username",
          e));

      s << i.username ();
    }

    // passwordMd5Hash
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "passwordMd5Hash",
          e));

      s << i.passwordMd5Hash ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const scrobbled& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // track
    //
    for (scrobbled::track_const_iterator
         b (i.track ().begin ()), n (i.track ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "track",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const toScrobble& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // track
    //
    for (toScrobble::track_const_iterator
         b (i.track ().begin ()), n (i.track ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "track",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

